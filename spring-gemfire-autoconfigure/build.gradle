plugins {
    id 'java-library'
    id "io.freefair.lombok" version "5.3.0"
    id 'dependency-constraints'
    id 'gemfire-repo-artifact-publishing'
    id 'spring-java-jar'
}

description = "Spring Boot Auto-Configuration for VMware GemFire"

project.ext.set("pomProjectLongName","Spring Boot Auto-Configure for VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-gemfire-autoconfigure")
project.ext.set("pomProjectDescription",description)

dependencies {
    implementation("org.springframework.geode:spring-geode-autoconfigure:$springBootDataGeodeVersion") {
        exclude group:"org.springframework.geode", module:"spring-geode"
    }
    api(platform("com.vmware.gemfire:gemfire-server-bom:$gemfireVersion")) {
        exclude group: 'org.apache.geode', module: 'geode-log4j'
    }

    implementation project(":spring-gemfire")

    compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

    implementation project(':spring-gemfire-extensions')

    implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    implementation "com.vmware.gemfire:spring-session-gemfire-${gemfireBaseVersion}:$springSessionDataGemFireVersion"

    testImplementation "jakarta.servlet:jakarta.servlet-api"
    testImplementation "junit:junit"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.projectlombok:lombok"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.data:spring-data-geode-test"
    testImplementation "edu.umd.cs.mtc:multithreadedtc"
    testImplementation "com.vmware.gemfire:geode-http-service"
    testImplementation "com.vmware.gemfire:geode-web"
    testImplementation "org.apache.httpcomponents:httpclient"

    testCompileOnly "com.google.code.findbugs:jsr305"

    testRuntimeOnly "javax.cache:cache-api"
    testRuntimeOnly "org.springframework.boot:spring-boot-starter-jetty"
    testRuntimeOnly "org.springframework.boot:spring-boot-starter-json"
    testRuntimeOnly "org.springframework.shell:spring-shell"

    // Runtime Test dependency on Spring Cloud Services (SCS) to verify workaround to SCS problem!
    //testRuntime("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:2.0.3.RELEASE") {
    //	exclude group: "org.apache.logging.log4j", module: "log4j-core"
    //}

}

sourceSets{
    test{
        java{
            srcDir file('src/test/java')
            srcDir file('src/sbdg-test-read-only/java')
        }
        resources{
            srcDir file('src/test/resources')
            srcDir file('src/sbdg-test-read-only/resources')
        }
    }
}

task cleanSpringTestClasses(type:Exec)
{
    commandLine 'rm', '-rf', "${project.projectDir}/src/sbdg-test-read-only"
}

clean{
    dependsOn("cleanSpringTestClasses")
}

test{
    dependsOn(":spring-gemfire-starter:test")
}

