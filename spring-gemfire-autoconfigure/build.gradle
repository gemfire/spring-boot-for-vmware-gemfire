plugins {
  id 'java-library'
  id "io.freefair.lombok" version "8.0.1"
  id 'dependency-constraints'
  id 'gemfire-repo-artifact-publishing'
  id 'spring-java-jar'
  id 'com.netflix.nebula.optional-base' version '8.0.0' // if you want optional-base
}

description = "Spring Boot Auto-Configuration for VMware GemFire"

project.ext.set("pomProjectLongName", "Spring Boot Auto-Configure for VMware GemFire")
project.ext.set("pomProjectArtifactName", "spring-boot-2.7-gemfire-autoconfigure-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription", description)

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc{
  failOnError=false
}

dependencies {
  api project(":spring-gemfire")

  compileOnly "com.vmware.gemfire:gemfire-core:$gemfireVersion"
  compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

  implementation project(':spring-gemfire-extensions'), optional

  implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion", optional
  implementation "org.springframework.boot:spring-boot-autoconfigure-processor:$springBootVersion", optional
  implementation "com.vmware.gemfire:spring-session-2.7-gemfire-${getGemFireBaseVersion()}:$springSessionDataGemFireVersion", optional

  implementation 'org.aspectj:aspectjweaver:1.9.19'

  testImplementation "jakarta.servlet:jakarta.servlet-api"
  testImplementation "junit:junit"
  testImplementation "org.assertj:assertj-core:3.24.1"
  testImplementation "org.mockito:mockito-core:4.11.0"
  testImplementation "org.projectlombok:lombok:1.18.28"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.springframework.boot:spring-boot-starter-web"
  testImplementation "com.vmware.gemfire:spring-test-gemfire-${getGemFireBaseVersion()}-2.7:$springTestGemFireVersion"
  testImplementation "edu.umd.cs.mtc:multithreadedtc"
  testImplementation "com.vmware.gemfire:gemfire-http-service:${gemfireVersion}"
  testImplementation "com.vmware.gemfire:gemfire-web:${gemfireVersion}"
  testImplementation "com.vmware.gemfire:gemfire-core:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-cq:$gemfireVersion"
  testImplementation "com.vmware.gemfire:gemfire-wan:$gemfireVersion"
  testImplementation "org.apache.httpcomponents:httpclient"

  testCompileOnly "com.google.code.findbugs:jsr305"

  testRuntimeOnly "javax.cache:cache-api"
  testRuntimeOnly "org.springframework.boot:spring-boot-starter-jetty"
  testRuntimeOnly "org.springframework.boot:spring-boot-starter-json"
  testRuntimeOnly "org.springframework.shell:spring-shell"
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}

