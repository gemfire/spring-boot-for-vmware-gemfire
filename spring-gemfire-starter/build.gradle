import com.google.cloud.storage.BlobId
import com.google.cloud.storage.BlobInfo
import com.google.cloud.storage.Storage
import com.google.cloud.storage.StorageOptions

buildscript {
  dependencies {
    classpath 'com.google.cloud:google-cloud-storage:2.29.1'
  }
}

plugins {
  id 'java-library'
  id 'gemfire-repo-artifact-publishing'
}

project.ext.set("pomProjectLongName","Spring Boot for VMware GemFire")
project.ext.set("pomProjectArtifactName","spring-boot-3.1-gemfire-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription","Spring Boot For VMware GemFire")

description = "Spring Boot Starter for VMware GemFire"

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc{
  failOnError=false
}

dependencies {
  api "org.springframework.boot:spring-boot-starter:$springBootVersion"

  api project(':spring-gemfire')
  api project(':spring-gemfire-autoconfigure')

  runtimeOnly "org.springframework.shell:spring-shell:$springShellVersion"
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}

def exportedProjects= [
        ":spring-gemfire",
        ":spring-gemfire-actuator",
        ":spring-gemfire-actuator-autoconfigure",
        ":spring-gemfire-autoconfigure",
        ":spring-gemfire-extensions",
        ":spring-gemfire-jetty11",
        ":spring-gemfire-starter",
        ":spring-gemfire-starter-logging",
        ":spring-gemfire-starter-session",
        ":spring-gemfire-starter-test",
]

tasks.register('combinedJavadoc', Javadoc)  {
  source exportedProjects.collect { project(it).sourceSets.main.allJava }
  title = "Spring Boot $springBootBaseVersion for VMware GemFire ${getGemFireBaseVersion()} Java API Reference"
  classpath = files(exportedProjects.collect {
    project(it).sourceSets.main.compileClasspath
  })
  destinationDir = file("${buildDir}/docs/javadoc")
}

tasks.register('combinedJavadocJar', Jar) {
  dependsOn combinedJavadoc
  archiveClassifier = 'javadoc'
  from combinedJavadoc.destinationDir
}

tasks.register('copyJavadocsToBucket') {
  dependsOn combinedJavadocJar
  doLast {
    Storage storage = StorageOptions.newBuilder().setProjectId(project.findProperty('docsGCSProject')).build().getService()
    BlobId blobId = BlobId.of(project.findProperty("docsGCSBucket"), "${project.findProperty('pomProjectArtifactName')}/${project.version}/${combinedJavadocJar.outputs.files.singleFile.name}")
    BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build()
    storage.createFrom(blobInfo, combinedJavadocJar.outputs.files.singleFile.toPath())
  }
}