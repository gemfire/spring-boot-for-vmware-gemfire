buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://repo.spring.io/plugins-release' }
  }
}

plugins {
  id 'org.springframework.boot' version "${springBootVersion}" apply false
  id 'idea'
  id 'eclipse'
  id 'java'
}

subprojects {

  group = 'com.vmware.gemfire'

  sourceCompatibility = '17'
  targetCompatibility = '17'

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      credentials {
        username "$gemfireRepoUsername"
        password "$gemfireRepoPassword"
      }
      url = uri("https://commercial-repo.pivotal.io/data3/gemfire-release-repo/gemfire")
    }

    def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
    if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
      additionalMavenRepoURLs.split(",").each {
        project.getRepositories()
                .maven(mavenRepository -> {
                  mavenRepository.setUrl(uri(it.toString()));
                });
      }
    }
  }

  ext.testDependencies = [
          "junit:junit",
          "org.junit.jupiter:junit-jupiter-api",
          "org.junit.vintage:junit-vintage-engine",
          "org.assertj:assertj-core",
          "org.mockito:mockito-core",
          "org.projectlombok:lombok",
          "org.springframework:spring-test",
          "edu.umd.cs.mtc:multithreadedtc"
  ]

  plugins.withType(JavaPlugin) {
    dependencies {
      testImplementation testDependencies
    }
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "minutes"
  }
}

String getGemFireBaseVersion() {
  def split = "${gemfireVersion}".split("\\.")
  if (split.length < 2) {
    throw new RuntimeException("gemfireVersion is malformed")
  }
  return "${split[0]}.${split[1]}"
}

