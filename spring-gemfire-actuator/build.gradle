plugins {
  id 'java-library'
  id 'dependency-constraints'
  id 'gemfire-repo-artifact-publishing'
  id 'spring-java-jar'
}

description = "Spring Boot Actuator for VMware GemFire"

project.ext.set("pomProjectLongName", description)
project.ext.set("pomProjectArtifactName", "spring-boot-2.7-gemfire-actuator-${getGemFireBaseVersion()}")
project.ext.set("pomProjectDescription", description)

java {
  withJavadocJar()
  withSourcesJar()
}

javadoc{
  failOnError=false
}

dependencies {
  api project(":spring-gemfire")

  api "org.springframework.boot:spring-boot-starter-actuator"

  runtimeOnly "com.vmware.gemfire:gemfire-logging:$gemfireVersion"
  runtimeOnly "com.vmware.gemfire:gemfire-serialization:$gemfireVersion"

  compileOnly "com.vmware.gemfire:gemfire-server-all:$gemfireVersion"

  testImplementation("com.vmware.gemfire:gemfire-server-all:$gemfireVersion") {
    exclude group: 'com.vmware.gemfire', module: 'gemfire-log4j'
  }

  testImplementation "junit:junit"
  testImplementation "org.assertj:assertj-core"
  testImplementation "org.mockito:mockito-core"
  testImplementation "org.projectlombok:lombok"
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "com.vmware.gemfire:spring-test-gemfire-${getGemFireBaseVersion()}-2.7:$springTestGemFireVersion"
  testImplementation "edu.umd.cs.mtc:multithreadedtc"
}

repositories {
  def additionalMavenRepoURLs = project.ext.get('additionalMavenRepoURLs')
  if (!additionalMavenRepoURLs.isEmpty() && !additionalMavenRepoURLs.isBlank()) {
    additionalMavenRepoURLs.split(",").each {
      project.getRepositories()
              .maven(mavenRepository -> {
                mavenRepository.setUrl(uri(it.toString()));
              });
    }
  }
}
